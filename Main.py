import telebot
import re
from config import token

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞
mybot = telebot.TeleBot(token)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@mybot.message_handler(commands=['start'])
def start_mes(message):
    mybot.send_message(message.chat.id, '–ù–∞—á–Ω—ë–º –æ–±—â–µ–Ω–∏–µ! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ')


@mybot.message_handler(content_types=['text'])
def dialog(message):
    global memory
    smiles = {'üòÄ', 'üòë', '‚òπ', 'üò°'}
    logic = {'üëç', 'üëé'}
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    story = message.text
    # –ü—ã—Ç–∞–µ–º—Å—è —É–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ
    index_id = read_id(message.chat.id)
    # –í—Å–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–ø–ª–∏–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏
    words_id = read_words_id(index_id)
    # –í—Å–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞—ë–º —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏
    answers_id = read_answers_id(index_id)

    # –ü—Ä–∏  —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–º–∞–π–ª–æ–≤
    if story not in smiles and story not in logic:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        story = story.replace('.', '')
        story = story.replace(',', '')
        story = story.replace('!', '')
        story = story.replace('?', '')
        story = story.lower()
        spisok_story = story.split()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å –¥–∏–∞–ª–æ–≥–æ–º –∏–∑ –ø–∞–º—è—Ç–∏
        # –ò —Å–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        list_overlap = []
        for i in words_id:
            overlap = 0
            for j in spisok_story:
                find_word = re.search(j, i)
                if find_word != None:
                    overlap += 1
            list_overlap.append(overlap)
        # –ù–∞—Ö–æ–¥–∏–º –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        index_list_overlap = list_overlap.index(max(list_overlap))
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        if max(list_overlap) > 0:
            answer = answers_id[index_list_overlap]
            mybot.send_message(message.chat.id, answer, reply_markup=keyboard_go())
            memory = message.text
        else:
            mybot.send_message(message.chat.id, "...", reply_markup=keyboard_go())
            memory = message.text
    elif story == 'üëé':
        mybot.send_message(message.chat.id, "–ê —á—Ç–æ –í—ã –æ–∂–∏–¥–∞–ª–∏ —É—Å–ª—ã—à–∞—Ç—å?")
        mybot.register_next_step_handler(message, save_word_answer)
    elif story == 'üëç':
        pass

    if story == 'üòÄ':
        emotion(index_id, story)
    elif story == 'üòë':
        emotion(index_id, story)
    elif story == '‚òπ':
        emotion(index_id, story)
    elif story == 'üò°':
        emotion(index_id, story)


# –†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
def read_id(user_id):
    with open("all_id.txt", 'r', encoding='utf-8') as f:
        spisok_id = str(f.read())
        spisok_id = spisok_id.split()

    # –ü—ã—Ç–∞–µ–º—Å—è —É–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞
    # –ò—â–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–Ω–Ω–µ–µ –ø–∏—Å–∞–≤—à–∏—Ö
    if str(user_id) in spisok_id:
        return str(spisok_id.index(str(user_id)))
    else:
        with open("all_id.txt", 'a', encoding='utf-8') as f:
            print(f' {user_id}', end='', file=f)
        emotion_index = f'emotion_{str(len(spisok_id))}.txt'
        with open(emotion_index, 'w', encoding='utf-8') as f:
            f.close()
        return str(len(spisok_id))


# –†–µ–ø–ª–∏–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
def read_words_id(index):
    global words
    words = f'words_{index}.txt'
    try:
        with open(words, 'r', encoding='utf-8') as f:
            list_words = str(f.read())
            list_words = list_words.lower()
            list_words = list_words.replace(' ', '')
            list_words = list_words.split('<p>')
        return list_words
    except:
        f = open(words, 'w', encoding='utf-8')
        f.close()


# –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
def read_answers_id(index):
    global answers
    answers = f'answers_{index}.txt'
    try:
        with open(answers, 'r', encoding='utf-8') as f:
            list_answers = str(f.read())
            list_answers = list_answers.split('<p>')
        return list_answers
    except:
        f = open(answers, 'w', encoding='utf-8')
        f.close()


# –ó–∞–ø–∏—Å—å —Ä–µ–ø–ª–∏–∫–∏ –∏ –æ—Ç–≤–µ—Ç–∞
def save_word_answer(message):
    with open(words, 'a', encoding='utf-8') as f:
        print(f'<p>{memory}', end='', file=f)
    with open(answers, 'a', encoding='utf-8') as f:
        print(f'<p>{message.text}', end='', file=f)
    mybot.send_message(message.chat.id, '–∞–≥–∞')


# –ó–∞–ø–∏—Å—å —ç–º–æ—Ü–∏–π
def emotion(index, story):
    pass


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —ç–º–æ—Ü–∏–π –∏ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
def keyboard_go():
    keyb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_smile = telebot.types.KeyboardButton('üòÄ')
    button_middle = telebot.types.KeyboardButton('üòë')
    button_sad = telebot.types.KeyboardButton('‚òπ')
    button_angry = telebot.types.KeyboardButton('üò°')
    button_ok = telebot.types.KeyboardButton('üëç')
    button_notok = telebot.types.KeyboardButton('üëé')
    keyb.row(button_ok, button_notok)
    keyb.row(button_smile, button_middle, button_sad, button_angry)
    return keyb


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—É(—Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
mybot.infinity_polling()
